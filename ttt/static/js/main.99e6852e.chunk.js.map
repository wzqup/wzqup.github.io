{"version":3,"sources":["components/Square.js","components/Board.js","utils/index.js","components/Game.js","index.js"],"names":["props","className","onClick","clickFn","value","Board","i","Square","this","Squares","key","winnerZb","map","item","index","item2","index2","indexOf","renderSquare","React","Component","getWinner","lines","winner","zb","length","a","b","c","Game","state","player","history","squares","Array","fill","coord","stepNum","ascend","status","slice","currentSquares","reverse","handerClick","move","btnStr","state1","state2","join","jumpTo","sortOrder","squareInfo","setState","concat","step","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99e6852e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function (props) {\r\n    return (\r\n        <button className = {'square ' + props.className} onClick = {props.clickFn}>{props.value}</button>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport Square from './Square';  // 棋盘格子组件\r\n\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i,className){\r\n        return <Square value = {this.props.Squares[i]} key = {i} clickFn = {() => this.props.clickFn(i)} className = {className}></Square>\r\n    }\r\n\r\n    // render 返回DOM结构\r\n    render() {\r\n        let winnerZb = this.props.winnerZb;\r\n        let className = null;\r\n        return  <div>\r\n            {[0,1,2].map((item,index) => {\r\n                return <div className ={'board-row'} key = {item}>\r\n                    {[0,1,2].map((item2,index2) => {\r\n                        if(winnerZb && winnerZb.indexOf(index*3 + index2) > -1){\r\n                            className = 'red'\r\n                        } else {\r\n                            className = null\r\n                        }\r\n                        return this.renderSquare(index*3 + index2,className);\r\n                    })}\r\n                </div>\r\n            })}\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Board;","// 获取胜利者的方法\r\n\r\nfunction getWinner(Squares) {\r\n    let lines = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6]\r\n    ];\r\n    let winner = {Square:null,zb:null};\r\n\r\n    for(let i = 0; i < lines.length; i ++){\r\n        let [a,b,c] = lines[i];\r\n        \r\n        if (Squares[a] && Squares[a] === Squares[b] && Squares[a] === Squares[c]){\r\n            winner = {Square:Squares[a],zb:lines[i]};\r\n            break;\r\n        } \r\n    }\r\n\r\n    return winner;\r\n}\r\n\r\nexport default getWinner;","import React from 'react';\r\n\r\nimport Board from './Board';   // 棋盘组件\r\n\r\nimport getWinner from '../utils/index'  // 获取胜利者的函数\r\n\r\n\r\nexport default  class Game extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            // 玩家\r\n            player: true,\r\n            // 历史记录\r\n            history:[\r\n                {squares: Array(9).fill(null),coord:Array(2).fill(null),player:'X'}\r\n            ],\r\n            // 当前步数\r\n            stepNum: 0,\r\n            // 历史记录升序还是降序\r\n            ascend: true\r\n        }\r\n    }\r\n\r\n    render () {\r\n        // 历史记录数组\r\n        let history = this.state.history.slice();\r\n        \r\n        //  当前渲染的棋子数组\r\n        let currentSquares = this.state.history[this.state.stepNum].squares;\r\n\r\n        let status,winner;\r\n\r\n        winner = getWinner(currentSquares);\r\n\r\n        if(winner.Square){\r\n            status = `winner: ${winner.Square}`\r\n        } else if(history.length === 10) {\r\n            status = '平局!!'\r\n        } else {\r\n            status = `当前玩家: ${this.state.player?'X':'O'}`\r\n        }\r\n\r\n        if(!this.state.ascend){\r\n            history.reverse();\r\n        }\r\n        \r\n        \r\n        return <div className='game'>\r\n            \r\n            <Board Squares = {currentSquares} clickFn = {(i)=> this.handerClick(i)} winnerZb = {winner.zb} />\r\n\r\n            <div className='game-info border'>\r\n                <h3>{status}</h3>\r\n                <ol>\r\n                    {history.map((item,index) => {\r\n                        \r\n                        let move,btnStr,dom;\r\n                        // 升序且不是第0项\r\n                        let state1 = this.state.ascend && index;\r\n                        // 降序且不是最后一项\r\n                        let state2 = !this.state.ascend && index !== history.length -1;\r\n\r\n                        if(state1) move = index ;\r\n                        if(state2) move = history.length - index -1;\r\n\r\n                        btnStr = `Go to -- # ${move}--coord:( ${item.coord.join()} )--player ${item.player}`;\r\n\r\n                        dom = <li key={index}><button onClick = {() => this.jumpTo(move)}>{btnStr}</button></li>;\r\n\r\n                        if(state1 || state2) return dom;\r\n\r\n                        return null;\r\n\r\n                    })}\r\n                </ol>\r\n            </div>\r\n            <div className='game-info'>\r\n                <button onClick = {() => this.jumpTo('restart')} key={'重新开始'}>重新开始</button>\r\n                <button onClick = {() => {this.sortOrder()}}>{this.state.ascend ? '升序' : '降序'}</button>\r\n            </div>\r\n        </div>\r\n    }\r\n        // 点击事件处理函数\r\n    handerClick (i) {\r\n        // 棋盘坐标数组\r\n        const coordArr = [\r\n             [1,1],[2,1],[3,1],\r\n             [1,2],[2,2],[3,2],\r\n             [1,3],[2,3],[3,3]\r\n        ];\r\n\r\n        // 更新历史记录数组\r\n        let history = this.state.history.slice(0,this.state.stepNum+1);\r\n\r\n        // 当前棋子信息\r\n        let squareInfo = this.state.history[this.state.stepNum];\r\n        // 拷贝当前棋子信息数组\r\n        let squares = squareInfo.squares.slice();\r\n        // 拷贝当前棋子坐标数组\r\n        let coord = squareInfo.coord.slice();\r\n\r\n        let winner = getWinner(squares);\r\n    \r\n        // 有胜利者,或者该格子已经有棋子不执行后面\r\n        if(winner.Square || squares[i]){\r\n            return;\r\n        }\r\n    \r\n        squares[i] = this.state.player ? 'X' : 'O';\r\n        coord = coordArr[i]\r\n\r\n        this.setState({\r\n            player: !this.state.player,\r\n            history: history.concat({squares,coord,player: squares[i]}),\r\n            stepNum: history.length\r\n        })\r\n    }\r\n\r\n    // 跳转到某步\r\n    jumpTo(step){\r\n        if(step === 'restart'){\r\n            this.setState({\r\n                player: true,\r\n                history:[\r\n                    {squares: Array(9).fill(null),coord:Array(2).fill(null),player:'X'}\r\n                ],\r\n                stepNum: 0\r\n            })\r\n        } else {\r\n            this.setState({\r\n                stepNum: step,\r\n                player: step % 2 === 0\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    // 切换升降序\r\n    sortOrder(){\r\n        if(this.state.history.length > 1){\r\n            this.setState({\r\n                ascend:!this.state.ascend\r\n            })\r\n        } else {\r\n            alert('当前没有历史记录,无法排序!')\r\n        }\r\n\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nimport Game from './components/Game'\r\n\r\n\r\nReactDOM.render(<Game />,document.getElementById('root'));"],"sourceRoot":""}